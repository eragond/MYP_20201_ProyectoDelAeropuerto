Notas para le pdf (A ser pasadas latex)

DEFINICION DEL PROBLEMA
    Un cliente quiere tener una 'aplicacion' que le proporcione la informacion
    del clima de dos ciudades, una de origen y la otra de destino.
    Para esto la informacion entregada sera una cadena con el formato:
      ORIGEN, DESTINO, LAT_ORG, LON_ORG, LAT_DES, LON_DES
    El programa no necesita ser interactivo, y procesa minimo 3000 peticiones.

ANALISIS DEL PROBLEMA
    El cliente necesita un programa que procese multiples peticiones, y nos ha
    dado un archivo, donde cada linea representa una peticion a ser respondida.
    Necesidades:
        -> Manejar multiples peticiones a la vez, dando favor al uso de concurrencia.
        -> Una API que brinde los recursos del clima en un tiempo definido.

SELECCION DE ALTERNATIVAS
    Lenguaje y entorno de ejecucion:
        Como lenguaje se ha optado por JavaScript, ya que este cuenta con concurrencia
        de tipo asincrona de manera nativa y  es orientado a eventos.
        Ademas usaremos Node.js como entorno de ejecucion de JavaScript, ya que este
        no nos limita al entorno del navegador. Y al ser desarrollado en Node, esto
        permite la sustentabilidad a futuro al este poder ser integrado con un framework
        como express para tener una aplicacion bajo el modelo cliente-servidor.
        Pero por ahora nuestra aplicacion sera local, y cada linea representara una
        peticion, de cualquier modo, sera concurrente, apelando a la rapidez y a la
        escalabilidad.
        Ademas, apelando a la interoperatividad, usaremos solo modulos estandar de
        Node.js, para no cargar el programa con dependencias inecesarias.
    Interfaz:
        Ademas al no ser interactivo por ahora, solo contrara con una interfaz de
        linea de comandos (CLI), donde se mostraran las respuestas a cada una de las
        peticiones recibidas en el orden en el que sean procesadas.
    API del clima:
        Se ha decidido usar como API para obtener la informacion sobre el clima
        a la API de openweathermap, por su simpleza.
        Como limitacion, es que esta solo nos permite realizar 60 peticiones
        por minuto lo que nos obliga a limitar el numero de peticiones concurrentes
        en nuestro programa.

COMO FUNCIONA EL PROGRAMA (Pseudocodigo-ish)
    La prioridad es que todo sea concurrente (JavaScript solo soporta asincronia,
    no paralelismo), asi si esto es montado en un servidor no habria ninguna
    operacion que fuese capaz de bloquearlo.

    Inicia el programa

    0. Al inicio contamos con un cache de ciudades, un numero de llaves para API
      disponibles para hacer la peticion (60 por default) y un numero de peticiones
      totales.

    1. Lee el archivo linea por linea de manera asincrona, esto es, que cada vez
      que se lea una linea, se active un evento para ir a la siguiente accion, que
      se espera tambien sea de naturaleza asincrona; y cuando esta termine o se
      ponga en espera, continuamos leyendo lineas del acrhivo hasta que este se
      termine. Asi no necesitamos leer todo el archivo antes de poder hacer las
      peticiones a la API, sino que las hacemos a la par.

    2. Formatea la cadena de cada linea dentro de un arreglo asosciativo de dos
      objetos de tipo ciudad con un id, latitud y longitud.
      Donde un elemento es el origen y otro el destino. Ademas las llaves del
      arreglo son los id's de tres letras asociadas a cada ciudad.

    3. Recibimos el arreglo con ambas ciudades, y para cada ciudad en el array
      revisamos si esta no esta definida en el cache, si no lo esta, entonces
      hacemos la peticion a la API para que se definan los valores de la ciudad.
      La API no responde hasta que haya llaves de la API disponibles, asi nos
      aseguramos de que no sobrepasemos el numero maximo de peticiones perimitidas.
      La peticion a la API es de naturaleza asincrona, pues no queremos que el
      servidor pare solo para esperar la peticion.
      Cuando llegue la respuesta solo se dispara un evento, con el que definimos
      el valor de la ciudad en el cache y agregamos la ciudad a un array de retorno
      de las ciudades.
      De otra manera, si ya estaba en el cache, solo agregamos la ciudad al array
      de retorno. El array no regresa, hasta que los valores de ambas ciudades esten
      definidos, siendo esto tambien es asincrono.

    4. Una vez que se reciba el array con las ciudades respuesta, las imprimimos
      en un formato legible y las seguimos imprimiendo cada cierto tiempo.

    5A. Asincronamente refrescamos cada minuto el numero de llaves disponibles
      al default.

    6A. Asincronamente refrescamos cada 15 minutos los datos de cada ciudad
    dentro del cache
